name: CMake Multi-Platform Build and Release

on:
  push:
    branches: [ "master" ]
    tags:
      - "v*"            # e.g. v1.0.0
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        build_type: [Release]

    steps:
    # ---------- CHECKOUT ----------
    - name: Checkout source
      uses: actions/checkout@v4
      with:
        submodules: recursive

    # ---------- QT ----------
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: "6.7.2"
        host: ${{ matrix.os == 'windows-latest' && 'windows' || 'mac' }}

    # ---------- VCPKG ----------
    - name: Install spdlog via vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgArguments: spdlog
        # This will define $VCPKG_ROOT automatically

    # ---------- MACOS DEPENDENCIES ----------
    - name: Install macFUSE (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install --cask macfuse

    - name: Install FUSE-T (macOS) and make headers available
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        # Install the fuse-t cask (tries both forms)
        brew install --cask fuse-t || brew install macos-fuse-t/homebrew-cask/fuse-t || true
    
        # Detect brew prefix used by the runner (handles /usr/local vs /opt/homebrew)
        BREW_PREFIX="$(brew --prefix)"
        echo "Homebrew prefix: $BREW_PREFIX"
    
        # Candidate header/framework locations we will check
        CANDIDATES=(
          "$BREW_PREFIX/include/fuse"
          "/Library/Application Support/fuse-t/include/fuse"
          "/Library/Frameworks/fuse_t.framework/Headers"
          "/Library/Application Support/fuse-t/include"
        )
    
        FOUND=
        for p in "${CANDIDATES[@]}"; do
          if [ -d "$p" ]; then
            echo "Found FUSE headers at: $p"
            ls -la "$p" || true
            FOUND="$p"
            break
          fi
        done
    
        # If header dir is in Application Support or framework Headers, copy to brew prefix include
        if [ -z "$FOUND" ]; then
          echo "No standard FUSE header dir found. Listing /Library/Application Support and /Library/Frameworks for debugging:"
          ls -la "/Library/Application Support" || true
          ls -la "/Library/Frameworks" || true
          echo "If headers are still missing the cask may not have installed headers on this runner."
        else
          echo "Copying headers (if needed) into $BREW_PREFIX/include so CMake can find them"
          sudo mkdir -p "$BREW_PREFIX/include"
          # If it's a framework Headers dir, copy individual header(s)
          if [[ "$FOUND" == */Frameworks/* ]] ; then
            sudo cp -R "$FOUND/"* "$BREW_PREFIX/include/" || true
            # Also ensure a fuse_t/ directory exists so '#include <fuse_t/fuse_t.h>' works
            sudo mkdir -p "$BREW_PREFIX/include/fuse_t"
            if [ -f "/Library/Frameworks/fuse_t.framework/Headers/fuse_t.h" ]; then
              sudo cp "/Library/Frameworks/fuse_t.framework/Headers/fuse_t.h" "$BREW_PREFIX/include/fuse_t/"
            fi
          else
            # If it's an include/fuse style dir, copy its contents into brew include/fuse
            sudo mkdir -p "$BREW_PREFIX/include/fuse"
            sudo cp -R "$FOUND/"* "$BREW_PREFIX/include/fuse/" || true
          fi
          echo "Final /usr include tree (trimmed):"
          ls -la "$BREW_PREFIX/include" | sed -n '1,200p'
        fi

        
    # ---------- CONFIGURE ----------
    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        cmake -S . -B build `
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
          -DCMAKE_VERBOSE_MAKEFILE=ON `
          -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" `
          -DCMAKE_PREFIX_PATH="${{ github.workspace }}/Qt/6.7.2/msvc2019_64" `
          -Dprojected-fs="C:/Program Files (x86)/Windows Kits/10/Lib/10.0.26100.0/um/x64/ProjectedFSLib.lib"

    - name: Configure CMake (macOS)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        BREW_PREFIX="$(brew --prefix)"
        cmake -S . -B build \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_VERBOSE_MAKEFILE=ON \
          -DCMAKE_TOOLCHAIN_FILE="$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" \
          -DCMAKE_PREFIX_PATH="${{ github.workspace }}/Qt/6.7.2/macos;$BREW_PREFIX/Library/Frameworks;$BREW_PREFIX" \
          -DCMAKE_INCLUDE_PATH="$BREW_PREFIX/include;/Library/Application Support/fuse-t/include" \
          -DCMAKE_LIBRARY_PATH="$BREW_PREFIX/lib;/Library/Application Support/fuse-t/lib" \
          -DFUSE_T_FRAMEWORK="/Library/Frameworks/fuse_t.framework"


          
    - name: Verify FUSE headers
      if: matrix.os == 'macos-latest'
      run: ls -R /opt/homebrew/include/fuse_t

    # ---------- BUILD ----------
    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }} --parallel

    # ---------- PACKAGE ----------
    - name: Package binaries
      shell: bash
      run: |
        mkdir -p artifacts
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          cd build/${{ matrix.build_type }}
          exe=$(ls *.exe 2>/dev/null | head -n 1)
          if [ -n "$exe" ]; then
            echo "Running windeployqt on $exe"
            "${{ github.workspace }}/Qt/6.7.2/msvc2019_64/bin/windeployqt.exe" "$exe" || echo "windeployqt failed (may be harmless)"
            7z a ../../artifacts/motioncam-${{ github.ref_name }}-windows.zip ./*
          fi
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          cd build
          app=$(find . -name "*.app" | head -n 1)
          if [ -n "$app" ]; then
            echo "Running macdeployqt on $app"
            macdeployqt "$app" -verbose=2 || echo "macdeployqt failed"
            zip -r ../artifacts/motioncam-${{ github.ref_name }}-macos.zip "$app"
          fi
        fi

    # ---------- UPLOAD ----------
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: motioncam-${{ runner.os }}
        path: artifacts/*

  # ---------- RELEASE ----------
  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-files/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-files/**/*
          tag_name: ${{ github.ref_name }}
          name: "MotionCam-FS ${{ github.ref_name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
