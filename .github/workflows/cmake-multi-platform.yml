name: CMake Multi-Platform Build and Release

on:
  push:
    branches: [ "master" ]
    tags:
      - "v*"            # e.g. v1.0.0
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        build_type: [Release]

    steps:
    # ---------- CHECKOUT ----------
    - name: Checkout source
      uses: actions/checkout@v4
      with:
        submodules: recursive

    # ---------- QT ----------
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: "6.7.2"
        host: ${{ matrix.os == 'windows-latest' && 'windows' || 'mac' }}

    # ---------- VCPKG ----------
    - name: Install spdlog via vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgArguments: spdlog
        # This will define $VCPKG_ROOT automatically

    # ---------- MACOS DEPENDENCIES ----------
    - name: Install macFUSE (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install --cask macfuse

    - name: Install FUSE-T (macOS) headers manually
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        set -euxo pipefail

        # Fetch the latest FUSE-T release package
        curl -L -o /tmp/fuse-t.pkg \
          https://github.com/macos-fuse-t/fuse-t/releases/download/1.0.49/fuse-t-macos-installer-1.0.49.pkg

        # Extract the .pkg contents without installing system-wide
        mkdir -p /tmp/fuse-t-expanded
        pkgutil --expand /tmp/fuse-t.pkg /tmp/fuse-t-expanded

        # The actual payload is inside a subpackage; extract it
        mkdir -p /tmp/fuse-t-payload
        cd /tmp/fuse-t-payload
        cat /tmp/fuse-t-expanded/*.pkg/Payload | gunzip -dc | cpio -i || true
        cd -

        # Locate headers
        FOUND_HEADERS=$(find /tmp/fuse-t-payload -type f -name "fuse_t.h" | head -n 1 || true)
        if [ -z "$FOUND_HEADERS" ]; then
          echo "❌ Could not find fuse_t headers inside the .pkg payload"
          ls -R /tmp/fuse-t-payload | head -n 100
          exit 1
        fi

        echo "✅ Found headers at: $(dirname "$FOUND_HEADERS")"
        BREW_PREFIX=$(brew --prefix)
        sudo mkdir -p "$BREW_PREFIX/include/fuse_t"
        sudo cp -R "$(dirname "$FOUND_HEADERS")/"* "$BREW_PREFIX/include/fuse_t/"
        ls -R "$BREW_PREFIX/include/fuse_t"

        
    # ---------- CONFIGURE ----------
    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        cmake -S . -B build `
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
          -DCMAKE_VERBOSE_MAKEFILE=ON `
          -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" `
          -DCMAKE_PREFIX_PATH="${{ github.workspace }}/Qt/6.7.2/msvc2019_64" `
          -Dprojected-fs="C:/Program Files (x86)/Windows Kits/10/Lib/10.0.26100.0/um/x64/ProjectedFSLib.lib"

    - name: Configure CMake (macOS)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        BREW_PREFIX="$(brew --prefix)"
        cmake -S . -B build \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_VERBOSE_MAKEFILE=ON \
          -DCMAKE_TOOLCHAIN_FILE="$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" \
          -DCMAKE_PREFIX_PATH="${{ github.workspace }}/Qt/6.7.2/macos;$BREW_PREFIX/Library/Frameworks;$BREW_PREFIX" \
          -DCMAKE_INCLUDE_PATH="$BREW_PREFIX/include;/Library/Application Support/fuse-t/include" \
          -DCMAKE_LIBRARY_PATH="$BREW_PREFIX/lib;/Library/Application Support/fuse-t/lib" \
          -DFUSE_T_FRAMEWORK="/Library/Frameworks/fuse_t.framework"


          
    - name: Verify FUSE headers
      if: matrix.os == 'macos-latest'
      run: ls -R /opt/homebrew/include/fuse_t

    # ---------- BUILD ----------
    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }} --parallel

    # ---------- PACKAGE ----------
    - name: Package binaries
      shell: bash
      run: |
        mkdir -p artifacts
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          cd build/${{ matrix.build_type }}
          exe=$(ls *.exe 2>/dev/null | head -n 1)
          if [ -n "$exe" ]; then
            echo "Running windeployqt on $exe"
            "${{ github.workspace }}/Qt/6.7.2/msvc2019_64/bin/windeployqt.exe" "$exe" || echo "windeployqt failed (may be harmless)"
            7z a ../../artifacts/motioncam-${{ github.ref_name }}-windows.zip ./*
          fi
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          cd build
          app=$(find . -name "*.app" | head -n 1)
          if [ -n "$app" ]; then
            echo "Running macdeployqt on $app"
            macdeployqt "$app" -verbose=2 || echo "macdeployqt failed"
            zip -r ../artifacts/motioncam-${{ github.ref_name }}-macos.zip "$app"
          fi
        fi

    # ---------- UPLOAD ----------
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: motioncam-${{ runner.os }}
        path: artifacts/*

  # ---------- RELEASE ----------
  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-files/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-files/**/*
          tag_name: ${{ github.ref_name }}
          name: "MotionCam-FS ${{ github.ref_name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
