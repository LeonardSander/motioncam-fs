# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake Multi-Platform Build and Release

on:
  push:
    branches: [ "master" ]
    tags:
      - "v*"            # Build & release when pushing tags like v1.0.0
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [windows-latest, macos-latest]
        build_type: [Release]
        #*c_compiler: [gcc, clang, cl]
        #include:
        #  - os: windows-latest
        #    c_compiler: cl
        #    cpp_compiler: cl
        #  - os: ubuntu-latest
        #    c_compiler: gcc
        #    cpp_compiler: g++
        #  - os: ubuntu-latest
        #    c_compiler: clang
        #    cpp_compiler: clang++
        #exclude:
        #  - os: windows-latest
        #    c_compiler: gcc
        #  - os: windows-latest
        #    c_compiler: clang
        #  - os: ubuntu-latest
         #   c_compiler: cl

    steps:
    - name: Checkout source
      uses: actions/checkout@v4

    # ---------- INSTALL QT ----------
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: "6.7.2"
        host: ${{ matrix.os == 'windows-latest' && 'windows' || 'mac' }}
        modules: qtbase qttools qtdeclarative


    # ---------- CONFIGURE ----------
    - name: Configure CMake
      run: >
        cmake -S . -B build
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_VERBOSE_MAKEFILE=ON
        -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake
        -DCMAKE_PREFIX_PATH="${{ env.Qt6_DIR }}"
        -Dprojected-fs="C:/Program Files (x86)/Windows Kits/10/Lib/10.0.26100.0/um/x64/ProjectedFSLib.lib"
      shell: bash

    # ---------- BUILD ----------
    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }} --parallel

    # ---------- PACKAGE ----------
    - name: Package binaries
      shell: bash
      run: |
        mkdir -p artifacts
        if [ "${{ runner.os }}" == "Windows" ]; then
          cd build/${{ matrix.build_type }}
          exe=$(ls *.exe | head -n 1)
          echo "Running windeployqt on $exe"
          ${{ env.Qt6_DIR }}/bin/windeployqt.exe "$exe" || echo "windeployqt failed (may be harmless)"
          7z a ../../artifacts/motioncam-${{ github.ref_name }}-windows.zip ./*
        elif [ "${{ runner.os }}" == "macOS" ]; then
          cd build
          app=$(find . -name "*.app" | head -n 1)
          echo "Running macdeployqt on $app"
          macdeployqt "$app" -verbose=2 || echo "macdeployqt failed"
          zip -r ../artifacts/motioncam-${{ github.ref_name }}-macos.zip "$app"
        fi

    # ---------- UPLOAD ----------
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: motioncam-${{ runner.os }}
        path: artifacts/*

  # ---------- RELEASE ----------
  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
  
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-files/
  
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-files/**/*
          tag_name: ${{ github.ref_name }}
          name: "MotionCam-FS ${{ github.ref_name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
