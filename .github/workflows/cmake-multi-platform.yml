name: CMake Multi-Platform Build and Release

on:
  push:
    branches: [ "master" ]
    tags:
      - "v*"
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        build_type: [Release]

    steps:
    # ---------- CHECKOUT ----------
    - name: Checkout source
      uses: actions/checkout@v4
      with:
        submodules: recursive

    # ---------- CACHE ----------
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/vcpkg
          ~/Library/Caches/Homebrew
          build/
        key: ${{ runner.os }}-deps-${{ hashFiles('CMakeLists.txt', '.github/workflows/**') }}
        restore-keys: |
          ${{ runner.os }}-deps-

    # ---------- QT ----------
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: "6.7.2"
        host: ${{ matrix.os == 'windows-latest' && 'windows' || 'mac' }}

    # ---------- VCPKG ----------
    - name: Install spdlog via vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgArguments: spdlog

    # ---------- MACOS DEPENDENCIES ----------
    - name: Install macFUSE (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install --cask macfuse

    - name: Install FUSE-T headers (macOS)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        set -euxo pipefail

        FUSE_T_VERSION=1.0.49
        PKG_URL="https://github.com/macos-fuse-t/fuse-t/releases/download/${FUSE_T_VERSION}/fuse-t-macos-installer-${FUSE_T_VERSION}.pkg"
        echo "📦 Downloading FUSE-T from $PKG_URL"
        curl -L -o /tmp/fuse-t.pkg "$PKG_URL"

        # Ensure clean extraction dirs
        rm -rf /tmp/fuse-t-expanded /tmp/fuse-t-payload
        mkdir -p /tmp/fuse-t-expanded /tmp/fuse-t-payload

        # Expand pkg and all nested pkgs
        pkgutil --expand /tmp/fuse-t.pkg /tmp/fuse-t-expanded || true
        echo "📦 Extracted fuse-t.pkg contents:"
        ls -la /tmp/fuse-t-expanded || true

        # Extract payloads recursively
        find /tmp/fuse-t-expanded -name Payload | while read -r payload; do
          echo "📂 Extracting payload: $payload"
          cat "$payload" | gunzip -dc | (cd /tmp/fuse-t-payload && cpio -i) || true
        done

        echo "📁 Listing extracted payload:"
        find /tmp/fuse-t-payload | head -n 100 || true

        # Locate the framework headers
        if [ -d "/tmp/fuse-t-payload/Library/Frameworks/fuse_t.framework/Headers" ]; then
          echo "✅ Found fuse_t.framework headers"
          sudo mkdir -p /opt/homebrew/include/fuse_t
          sudo cp -R /tmp/fuse-t-payload/Library/Frameworks/fuse_t.framework/Headers/* /opt/homebrew/include/fuse_t/
        else
          echo "❌ Could not find fuse_t.framework headers inside payload"
          exit 1
        fi

        echo "✅ Final fuse_t include dir:"
        ls -la /opt/homebrew/include/fuse_t

    - name: Debug FUSE-T header location
      if: matrix.os == 'macos-latest'
      continue-on-error: true
      shell: bash
      run: |
        echo "🔍 Searching for fuse_t.h..."
        find /opt/homebrew /usr/local /Library /Applications /private/tmp -type f -name fuse_t.h || true

    # ---------- CONFIGURE ----------
    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        cmake -S . -B build `
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
          -DCMAKE_VERBOSE_MAKEFILE=ON `
          -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" `
          -DCMAKE_PREFIX_PATH="${{ github.workspace }}/Qt/6.7.2/msvc2019_64" `
          -Dprojected-fs="C:/Program Files (x86)/Windows Kits/10/Lib/10.0.26100.0/um/x64/ProjectedFSLib.lib"

    - name: Configure CMake (macOS)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        BREW_PREFIX="$(brew --prefix)"
        cmake -S . -B build \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_VERBOSE_MAKEFILE=ON \
          -DCMAKE_TOOLCHAIN_FILE="$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" \
          -DCMAKE_PREFIX_PATH="${{ github.workspace }}/Qt/6.7.2/macos;$BREW_PREFIX" \
          -DCMAKE_INCLUDE_PATH="$BREW_PREFIX/include;/opt/homebrew/include/fuse_t;/Library/Frameworks/fuse_t.framework/Headers" \
          -DCMAKE_LIBRARY_PATH="$BREW_PREFIX/lib;/Library/Frameworks" \
          -DFUSE_T_FRAMEWORK="/Library/Frameworks/fuse_t.framework"

    # ---------- BUILD ----------
    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }} --parallel

    # ---------- PACKAGE ----------
    - name: Package binaries
      shell: bash
      run: |
        mkdir -p artifacts
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          cd build/${{ matrix.build_type }}
          exe=$(ls *.exe 2>/dev/null | head -n 1)
          if [ -n "$exe" ]; then
            echo "Running windeployqt on $exe"
            "${{ github.workspace }}/Qt/6.7.2/msvc2019_64/bin/windeployqt.exe" "$exe" || echo "windeployqt failed"
            7z a ../../artifacts/motioncam-${{ github.ref_name }}-windows.zip ./*
          fi
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          cd build
          app=$(find . -name "*.app" | head -n 1)
          if [ -n "$app" ]; then
            echo "Running macdeployqt on $app"
            macdeployqt "$app" -verbose=2 || echo "macdeployqt failed"
            zip -r ../artifacts/motioncam-${{ github.ref_name }}-macos.zip "$app"
          fi
        fi

    # ---------- UPLOAD ----------
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: motioncam-${{ runner.os }}
        path: artifacts/*

  # ---------- RELEASE ----------
  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-files/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-files/**/*
          tag_name: ${{ github.ref_name }}
          name: "MotionCam-FS ${{ github.ref_name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
