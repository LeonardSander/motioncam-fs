# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake Multi-Platform Build and Release

on:
  push:
    branches: [ "master" ]
    tags:
      - "v*"            # Build & release when pushing tags like v1.0.0
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [windows-latest, macos-latest]
        build_type: [Release]
        #*c_compiler: [gcc, clang, cl]
        #include:
        #  - os: windows-latest
        #    c_compiler: cl
        #    cpp_compiler: cl
        #  - os: ubuntu-latest
        #    c_compiler: gcc
        #    cpp_compiler: g++
        #  - os: ubuntu-latest
        #    c_compiler: clang
        #    cpp_compiler: clang++
        #exclude:
        #  - os: windows-latest
        #    c_compiler: gcc
        #  - os: windows-latest
        #    c_compiler: clang
        #  - os: ubuntu-latest
         #   c_compiler: cl

    steps:
    - name: Checkout source
      uses: actions/checkout@v4

    # ---------- WINDOWS ----------
    - name: Configure (Windows)
      if: runner.os == 'Windows'
      run: >
        cmake -S . -B build
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_VERBOSE_MAKEFILE=ON
        -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake
        -DCMAKE_PREFIX_PATH=C:/Qt/6.9.1/msvc2022_64
        -Dprojected-fs="C:/Program Files (x86)/Windows Kits/10/Lib/10.0.26100.0/um/x64/ProjectedFSLib.lib"

    - name: Build (Windows)
      if: runner.os == 'Windows'
      run: cmake --build build --config ${{ matrix.build_type }} --parallel

    - name: Deploy Qt (Windows)
      if: runner.os == 'Windows'
      run: |
        cd build/${{ matrix.build_type }}
        if (Test-Path "*.exe") {
          $exe = Get-ChildItem *.exe | Select-Object -First 1
          echo "Deploying $exe..."
          & "C:/Qt/6.9.1/msvc2022_64/bin/windeployqt.exe" $exe
          7z a ../../motioncam-windows.zip ./*
        }

    # ---------- MACOS ----------
    - name: Install Qt (macOS)
      if: runner.os == 'macOS'
      uses: jurplel/install-qt-action@v3
      with:
        version: "6.9.1"
        host: mac
        modules: qtbase qttools qtdeclarative

    - name: Configure (macOS)
      if: runner.os == 'macOS'
      run: >
        cmake -S . -B build
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_PREFIX_PATH=${{ env.Qt6_DIR }}

    - name: Build (macOS)
      if: runner.os == 'macOS'
      run: cmake --build build --config ${{ matrix.build_type }} --parallel

    - name: Deploy Qt (macOS)
      if: runner.os == 'macOS'
      run: |
        cd build
        app_name=$(find . -name "*.app" | head -n 1)
        if [ -n "$app_name" ]; then
          echo "Deploying $app_name"
          macdeployqt "$app_name" -verbose=2 || echo "macdeployqt failed (may be harmless)"
          zip -r ../motioncam-macos.zip "$app_name"
        fi

    # ---------- COMMON ----------
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: motioncam-${{ runner.os }}-${{ matrix.build_type }}
        path: |
          build/**/*.exe
          build/**/*.app
          build/**/*.dylib
          build/**/*.dll
          build/**/*.so

    
  # ---------- RELEASE JOB ----------
  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')   # Only run for tags

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-files/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-files/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
