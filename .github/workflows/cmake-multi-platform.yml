name: CMake Multi-Platform Build and Release

on:
  push:
    branches: [ "master" ]
    tags:
      - "v*"
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        build_type: [Release]

    steps:
    # ---------- CHECKOUT ----------
    - name: Checkout source
      uses: actions/checkout@v4
      with:
        submodules: recursive

    # ---------- CACHE: Qt, vcpkg, fuse-t ----------
    - name: Cache Qt
      id: qt-cache
      uses: actions/cache@v4
      with:
        path: ${{ runner.tool_cache }}/Qt
        key: ${{ runner.os }}-qt-6.7.2

    - name: Cache vcpkg
      id: vcpkg-cache
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/vcpkg_installed
          ${{ env.VCPKG_ROOT }}
        key: ${{ runner.os }}-vcpkg-spdlog

    - name: Cache FUSE-T headers (macOS)
      if: matrix.os == 'macos-latest'
      id: fuse-cache
      uses: actions/cache@v4
      with:
        path: /opt/homebrew/include/fuse_t
        key: macos-fuse-t-1.0.49

    # ---------- QT ----------
    - name: Install Qt
      if: steps.qt-cache.outputs.cache-hit != 'true'
      uses: jurplel/install-qt-action@v3
      with:
        version: "6.7.2"
        host: ${{ matrix.os == 'windows-latest' && 'windows' || 'mac' }}

    # ---------- VCPKG ----------
    - name: Install spdlog via vcpkg
      if: steps.vcpkg-cache.outputs.cache-hit != 'true'
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgArguments: spdlog

    # ---------- MACOS DEPENDENCIES ----------
    - name: Install macOS FUSE dependencies
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        set -euxo pipefail
        brew install --cask macfuse || echo "macFUSE already installed"

    - name: Prepare FUSE-T headers (macOS, cached)
      if: matrix.os == 'macos-latest'
      id: fuse_t
      uses: actions/cache@v4
      with:
        path: /opt/homebrew/include/fuse_t
        key: macos-fuse-t-1.0.49

    - name: Install FUSE-T headers
      if: matrix.os == 'macos-latest' && steps.fuse_t.outputs.cache-hit != 'true'
      shell: bash
      run: |
        set -euxo pipefail
        FUSE_T_VERSION="1.0.49"
        FUSE_T_PKG="fuse-t-macos-installer-${FUSE_T_VERSION}.pkg"
        FUSE_T_URL="https://github.com/macos-fuse-t/fuse-t/releases/download/${FUSE_T_VERSION}/${FUSE_T_PKG}"

        TMPDIR=$(mktemp -d)
        echo "📦 Downloading FUSE-T ${FUSE_T_VERSION}..."
        curl -L -o "${TMPDIR}/${FUSE_T_PKG}" "${FUSE_T_URL}"

        echo "📦 Extracting .pkg..."
        pkgutil --expand "${TMPDIR}/${FUSE_T_PKG}" "${TMPDIR}/expanded"

        mkdir -p "${TMPDIR}/payload"
        cd "${TMPDIR}/payload"

        # Extract all payloads
        for PKG in "${TMPDIR}"/expanded/*.pkg; do
          if [ -f "${PKG}/Payload" ]; then
            cat "${PKG}/Payload" | gunzip -dc | cpio -i --quiet || true
          fi
        done

        # Locate fuse_t.h
        HEADER_DIR=$(find "${TMPDIR}/payload" -type f -name "fuse_t.h" -exec dirname {} \; | head -n 1 || true)
        if [ -z "$HEADER_DIR" ]; then
          echo "❌ Could not find fuse_t.h"
          find "${TMPDIR}/payload" -maxdepth 4 -type f | head -n 50
          exit 1
        fi

        echo "✅ Found fuse_t.h at: ${HEADER_DIR}"
        BREW_PREFIX=$(brew --prefix)
        sudo mkdir -p "${BREW_PREFIX}/include/fuse_t"
        sudo cp -R "${HEADER_DIR}/"*.h "${BREW_PREFIX}/include/fuse_t/"

        echo "📂 Installed headers:"
        ls -la "${BREW_PREFIX}/include/fuse_t"

        rm -rf "${TMPDIR}"

    # ---------- CONFIGURE ----------
    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        cmake -S . -B build `
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
          -DCMAKE_VERBOSE_MAKEFILE=ON `
          -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" `
          -DCMAKE_PREFIX_PATH="${{ github.workspace }}/Qt/6.7.2/msvc2019_64" `
          -Dprojected-fs="C:/Program Files (x86)/Windows Kits/10/Lib/10.0.26100.0/um/x64/ProjectedFSLib.lib"

    - name: Configure CMake (macOS)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        BREW_PREFIX="$(brew --prefix)"
        FUSE_T_INCLUDE=$(find "$BREW_PREFIX" /Library /usr/local -type f -name fuse_t.h 2>/dev/null | xargs -I {} dirname {} | head -n 1 || true)
        echo "📁 Using FUSE_T_INCLUDE=${FUSE_T_INCLUDE}"
        cmake -S . -B build \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_VERBOSE_MAKEFILE=ON \
          -DCMAKE_TOOLCHAIN_FILE="$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" \
          -DCMAKE_PREFIX_PATH="${{ github.workspace }}/Qt/6.7.2/macos;$BREW_PREFIX" \
          -DCMAKE_INCLUDE_PATH="$BREW_PREFIX/include;$FUSE_T_INCLUDE" \
          -DCMAKE_LIBRARY_PATH="$BREW_PREFIX/lib;/Library/Frameworks" \
          -DFUSE_T_INCLUDE_DIR="$FUSE_T_INCLUDE" \
          -DFUSE_T_FRAMEWORK="/Library/Frameworks/fuse_t.framework"



    - name: Debug FUSE-T header location
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        set -euxo pipefail
        echo "🔍 Searching for fuse_t.h..."
        find /opt/homebrew /usr/local /Library /Applications /private/tmp -type f -name fuse_t.h 2>/dev/null | tee /tmp/fuse_t_locations.txt
        echo "✅ All detected FUSE-T header paths:"
        cat /tmp/fuse_t_locations.txt || true

    # ---------- BUILD ----------
    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }} --parallel

    # ---------- PACKAGE ----------
    - name: Package binaries
      shell: bash
      run: |
        mkdir -p artifacts
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          cd build/${{ matrix.build_type }}
          exe=$(ls *.exe 2>/dev/null | head -n 1)
          if [ -n "$exe" ]; then
            echo "Running windeployqt on $exe"
            "${{ github.workspace }}/Qt/6.7.2/msvc2019_64/bin/windeployqt.exe" "$exe" || echo "windeployqt failed"
            7z a ../../artifacts/motioncam-${{ github.ref_name }}-windows.zip ./*
          fi
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          cd build
          app=$(find . -name "*.app" | head -n 1)
          if [ -n "$app" ]; then
            echo "Running macdeployqt on $app"
            macdeployqt "$app" -verbose=2 || echo "macdeployqt failed"
            zip -r ../artifacts/motioncam-${{ github.ref_name }}-macos.zip "$app"
          fi
        fi

    # ---------- UPLOAD ----------
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: motioncam-${{ runner.os }}
        path: artifacts/*

  # ---------- RELEASE ----------
  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-files/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-files/**/*
          tag_name: ${{ github.ref_name }}
          name: "MotionCam-FS ${{ github.ref_name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
